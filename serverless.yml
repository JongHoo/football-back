service: jay-football-x1 # NOTE: update this with your service name

provider:
  name: aws
  runtime: nodejs12.x
  region: ap-northeast-2

functions:

  # Login
  login:
    handler: src/login/login.handle
    events:
      - http:
          path: login
          method: post

  # League
  read-leagues:
    handler: src/leagues/readLeagues.handle
    events:
      - http:
          path: leagues
          method: get

  # Team
  create-teams-by-api:
    handler: src/teams/createTeamsByApi.handle
    events:
      - http:
          path: teams
          method: post

  read-teams:
    handler: src/teams/readTeams.handle
    events:
      - http:
          path: teams/{league}/{season}
          method: get

  # Match
  create-matches-by-api:
    handler: src/matches/createMatchesByApi.handle
    events:
      - http:
          path: matches
          method: post
    timeout: 30

  read-matches:
    handler: src/matches/readMatches.handle
    events:
      - http:
          path: matches/{league}/{season}/{team}
          method: get

  # Standing
  create-standings-by-api:
    handler: src/standings/createStandingsByApi.handle
    events:
      - http:
          path: standings
          method: post

  read-standings:
    handler: src/standings/readStandings.handle
    events:
      - http:
          path: standings/{league}/{season}
          method: get

  read-top-standings:
    handler: src/standings/readTopStandings.handle
    events:
      - http:
          path: standings/top/{season}
          method: get

  # For Batch
  send-top-standings:
    handler: src/batches/sendStandings.handle
    events:
      - http:
          path: batches/standings/
          method: post

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - serverless-offline
  - serverless-aws-alias
